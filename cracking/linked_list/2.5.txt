Sum Lists: You have two numbers represented by a linked list, where each node contains a single digit. The digits are stored in reverse order, such that the 1's digit is at the head of the list. Write a function that adds the two numbers and returns the sum as a linked list.

Examples
Input: (7 -> 1 -> 6) + (5 -> 9 -> 2). That is, 617 + 295
Output: 2 -> 1 -> 9. That is, 912

(1 -> 2) + (3 -> 4 -> 5) => (4 -> 6 -> 5)
(1 -> 2) + (7 -> 8 -> 9) => (8 -> 0 -> 0 -> 1)

Questions:
- can numbers be negative? How they are going to be represented? - Numbers can't be negative
- how zero number is represented?  - List of one zero element
- can input be empty list? - No
- is it a singly or doubly-linked lists? = Singly

Solution 1
Iterate through the both linked lists at the same time, summing up values and storing result in the output linked list. If result is more than 9, then store 1 in extra variable, which should be used for next summation and then set to zero. If one list is smaller than another, then algorithm should continue along the longer list essentially just copying values to result list. Runtime is O(a+b) because we are iterating through both lists. Extra memory is O(1)

Solution 2
Iterate through the shortest of input lists. After shortest list has ended, pick the next element from longer array and add 1 to it if it's stored. Point this element to the next element of longer list if it exists. Runtime O(min(a,b)). Extra memory O(1).

Follow up
Suppose the digits are stored in forward order. Repeat the above problem.
Example
Input: (6 -> 1 -> 7) + (2 -> 9 -> 5). That is, 617 + 295.
Output: 9 -> 1 -> 2. That is, 912.

Solution 3
Iterate through each list reversing the links, essentially turning 6 -> 1 -> 7 into 6 <- 1 <- 7 or 7 -> 1 -> 6. Then use solution 1 or 2. Runtime is O(a+b) because we have to iterate through both lists at least once. Extra memory is O(1).


We can't do better than O(min(a,b)) because we have to sum values from both arrays.


Implementation of solution 1


def sum_lists(head1: Node, head2: Node) -> Node:
  overflown = False
  node1 = head1
  node2 = head2
  fake_head = Node(-1)
  result_node = fake_head
  while node1 or node2:
    sum = 1 if overflown else 0
    overflown = False
    if node1:
      sum += node1.data
      node1 = node1.next
    if node2:
      sum += node2.data
      node2 = node2.next
    if sum >= 10:
      overflown = True
      sum = sum % 10
    sum_node = Node(sum)
    result_node.next = sum_node
    result_node = sum_node
  if overflown:
    result_node.next = Node(1)
  return fake_head.next


