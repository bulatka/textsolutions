Stack of Plates: Imagine a (literal) stack of plates. If the stack gets too high, it might topple. Therefore, in real life, we would likely start a new stack when the previous stack exceeds some threshold. Implement a data structure SetOfStacks that mimics this. SetOfStacks should be composed of several stacks and should create a new stack once the previous one exceeds capacity. SetOfStacks.push() and SetOfStacks.pop() should behave identically to a single stack (that is, pop() should return the same values as it would if there were just a single stack).
Follow up. 
Implement a function popAt(int index) which performs a pop operation on a specific sub-stack.

Examples:

Questions:

Solution

Implementation


class SetOfStacks:
  def __init__(self, threshold: int):
    self.stacks = []
    self.threshold = threshold
    
  def push(self, value):
    if not self.stacks or len(self.stacks[-1]) >= threshold:
      self.stacks.append([])
    stack = self.stacks[-1]
    stack.append(value)
    
  def pop(self):
    return self.popAt(-1)
  
  def popAt(self, index: int):
    if not self.stacks:
      return None
    try:
      stack = self.stacks[index]
    except IndexError:  # index provided is outside of available stacks range
      return None
    result = stack.pop()
    if not stack:  # no other element left in a stack
      self.stacks.remove(stack)
