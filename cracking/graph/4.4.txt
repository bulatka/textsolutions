Check Balanced: Implement a function to check if a binary tree is balanced. For the purposes of this question, a balanced tree is defined to be a tree such that the heights of the two subtrees of any node never differ by more than one.

Examples:
      1
   2     3   - Balanced
  4 5
  
      1
   2     3   - Balanced?
  4 5   6
 7

     1
      2      - Unbalanced at 1
       3

    1
  2   3      - Unbalanced at 2
 4   5
6 

Questions:
- none


Solution 1:
Recursive algorithm. For node check if left depth - right depth > 1, then the tree is unbalanced. Implement Depth First Search. Runtime is O(N) because we visit each node once. Memory is O(N) because we make up to N recursive calls.

Best conceivable runtime is O(N) because we can't confirm the tree is balanced without visiting each node.

Implementation:

class Ex44 {

  public static final class Node {
    private int value;
    private Node left;
    private Node right;
    public Node(int value) {
      this.value = value;
    }
  }
  
  public static boolean isBalanced(Node root) {
    try {
      checkSubtreeHeights(root);
      return true;
    } catch (IllegalStateException e) {
      return false;
    }
  }
  
  private static int checkSubtreeHeights(Node node) {
    if (node == null) {
      return 0;
    }
    int left = checkSubtreeHeights(node.left);
    int right = checkSubtreeHeights(node.right);
    if (Math.abs(left - right) > 1) {
      throw new IllegalStateException(node + " subtrees heights are " + left + " and " + right);
    }
    return Math.max(left, right) + 1;
  }

}


